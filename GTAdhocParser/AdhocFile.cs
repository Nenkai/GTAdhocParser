using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;

using Syroot.BinaryData.Memory;

using GTAdhocParser.Instructions;

namespace GTAdhocParser
{
    public class AdhocFile
    {
        public const string MAGIC = "ADCH";
        public string[] StringTable { get; private set; }
        public byte[] _buffer;

        public AdhocCode ParentCode { get; set; }
        public byte Version { get; set; }

        private AdhocFile(byte version)
        {
            Version = version;
        }

        public static AdhocFile ReadFromFile(string path)
        {
            var bytes = File.ReadAllBytes(path);
            var sr = new SpanReader(bytes, encoding: Encoding.ASCII);

            string magic = sr.ReadStringRaw(4);
            if (!magic.Equals(MAGIC))
                throw new Exception("Invalid MAGIC, doesn't match ADCH.");

            byte version = (byte)int.Parse(Encoding.ASCII.GetChars(sr.ReadBytes(3)));
            sr.ReadByte();
            var adc = new AdhocFile(version);

            adc.ParseStringTable(ref sr);
            adc.ParentCode = new AdhocCode();
            adc.ParentCode.Deserialize(adc, ref sr);

            return adc;
        }

        public void ParseStringTable(ref SpanReader sr)
        {
            uint entryCount = (uint)sr.DecodeBitsAndAdvance();
            StringTable = new string[entryCount];
            for (var i = 0; i < entryCount; i++)
            {
                int strLen = (int)sr.DecodeBitsAndAdvance();
                StringTable[i] = sr.ReadStringRaw(strLen);
            }
        }

        public void PrintStringTable(string outPath)
        {
            var sr = new SpanReader(_buffer);
            sr.Position = 8;

            using var sw = new StreamWriter(outPath);
            uint entryCount = (uint)sr.DecodeBitsAndAdvance();
            var results = new string[entryCount];
            for (var i = 0; i < entryCount; i++)
            {
                sw.WriteLine($"0x{sr.Position:X2} | {sr.ReadString1()}");
            }
            sw.Flush();
        }

        public void Disassemble(string outPath, bool withOffset)
        {
            using var sw = new StreamWriter(outPath);
            sw.WriteLine("==== Disassembly generated by GTADhocParser by Nenkai#9075 ====");
            if (!string.IsNullOrEmpty(ParentCode.OriginalSourceFile))
                sw.WriteLine($"Original File Name: {ParentCode.OriginalSourceFile}");

            sw.WriteLine($"Version: {Version} ({StringTable.Length} strings)");

            var d = new CodeBuilder();
            for (var i = 0; i < ParentCode.Components.Count; i++)
            {
                var inst = ParentCode.Components[i];

                if (inst is OpMethod)
                    sw.WriteLine();

                if (withOffset)
                    sw.Write($"{inst.InstructionOffset,6:X2}|");
                sw.WriteLine($"{inst.LineNumber,4}| {ParentCode.Components[i]}");


                if (inst is OpMethod method)
                {
                    foreach (var metInstruction in method.Code.Components)
                    {
                        sw.Write("  ");
                        if (withOffset)
                            sw.Write($"{metInstruction.InstructionOffset-5,6:X2}|");

                        sw.WriteLine($"{metInstruction.LineNumber,4}| {metInstruction}");
                    }
                    sw.WriteLine();
                }
            }

            sw.Flush();
        }
    }
}
